===========================================
GI·∫¢I TH√çCH CHI TI·∫æT CODE H·ªÜ TH·ªêNG ƒê·∫∂T PH√íNG KH√ÅCH S·∫†N
===========================================

üìÅ C·∫§U TR√öC TH∆Ø M·ª§C V√Ä FILE:
- lib/modules/home/: Ch·ª©a t·∫•t c·∫£ c√°c trang li√™n quan ƒë·∫øn ƒë·∫∑t ph√≤ng
- lib/services/: Ch·ª©a c√°c d·ªãch v·ª• h·ªó tr·ª£
- lib/utils/: Ch·ª©a c√°c ti·ªán √≠ch v√† h·∫±ng s·ªë
- lib/providers/: Qu·∫£n l√Ω tr·∫°ng th√°i ·ª©ng d·ª•ng

===========================================
1. BOOKING_SCREEN.DART - TRANG ƒê·∫∂T PH√íNG CH√çNH
===========================================

üîß IMPORTS V√Ä DEPENDENCIES:
```dart
import 'package:flutter/material.dart';           // Framework Flutter c∆° b·∫£n
import 'package:table_calendar/table_calendar.dart'; // L·ªãch ch·ªçn ng√†y
import 'package:intl/intl.dart';                  // ƒê·ªãnh d·∫°ng ng√†y th√°ng
import 'package:shared_preferences/shared_preferences.dart'; // L∆∞u tr·ªØ local
import 'package:geocoding/geocoding.dart';        // Chuy·ªÉn ƒë·ªïi ƒë·ªãa ch·ªâ th√†nh t·ªça ƒë·ªô
import 'package:url_launcher/url_launcher.dart';  // M·ªü URL b√™n ngo√†i
```

üì± CLASS V√Ä STATE:
```dart
class BookingScreen extends StatefulWidget {
  final Map<String, dynamic> hotel;        // Th√¥ng tin kh√°ch s·∫°n t·ª´ trang tr∆∞·ªõc
  final DateTime? initialDate;             // Ng√†y ban ƒë·∫ßu (c√≥ th·ªÉ null)
  final TimeOfDay? initialTime;            // Gi·ªù ban ƒë·∫ßu (c√≥ th·ªÉ null)
  final int? initialHour;                  // S·ªë gi·ªù s·ª≠ d·ª•ng ban ƒë·∫ßu
  final DateTimeRange? initialRange;       // Kho·∫£ng th·ªùi gian ban ƒë·∫ßu
  
  const BookingScreen({...});              // Constructor v·ªõi tham s·ªë b·∫Øt bu·ªôc
}

class _BookingScreenState extends State<BookingScreen> {
  DateTime? selectedDate;                  // Ng√†y ƒë√£ ch·ªçn
  TimeOfDay? selectedTime;                 // Gi·ªù ƒë√£ ch·ªçn
  int? selectedHour;                       // S·ªë gi·ªù s·ª≠ d·ª•ng
  DateTimeRange? selectedRange;            // Kho·∫£ng th·ªùi gian
  bool isFavorite = false;                 // Tr·∫°ng th√°i y√™u th√≠ch
  int? currentUserId;                      // ID ng∆∞·ªùi d√πng hi·ªán t·∫°i
}
```

üåç T√çNH TO√ÅN KHO·∫¢NG C√ÅCH:
```dart
// V·ªã tr√≠ c·ªë ƒë·ªãnh c·ªßa ng∆∞·ªùi d√πng - T√≤a V·∫°n Ph√∫c
static const double userLat = 20.9823;     // Vƒ© ƒë·ªô
static const double userLng = 105.7817;    // Kinh ƒë·ªô

// C√¥ng th·ª©c Haversine t√≠nh kho·∫£ng c√°ch gi·ªØa 2 ƒëi·ªÉm
double _calculateDistance(double lat1, double lon1, double lat2, double lon2) {
  const double earthRadius = 6371;         // B√°n k√≠nh Tr√°i ƒê·∫•t (km)
  double dLat = _degreesToRadians(lat2 - lat1);    // Ch√™nh l·ªách vƒ© ƒë·ªô
  double dLon = _degreesToRadians(lon2 - lon1);    // Ch√™nh l·ªách kinh ƒë·ªô
  
  // C√¥ng th·ª©c t√≠nh kho·∫£ng c√°ch
  double a = sin(dLat / 2) * sin(dLat / 2) +
      cos(_degreesToRadians(lat1)) * cos(_degreesToRadians(lat2)) *
      sin(dLon / 2) * sin(dLon / 2);
  double c = 2 * atan2(sqrt(a), sqrt(1 - a));
  double distance = earthRadius * c;
  
  return distance * 1000;                  // Chuy·ªÉn ƒë·ªïi sang m√©t
}

// Chuy·ªÉn ƒë·ªïi ƒë·ªô sang radian
double _degreesToRadians(double degrees) {
  return degrees * pi / 180;               // pi = 3.14159...
}
```

üìÖ QU·∫¢N L√ù TH·ªúI GIAN:
```dart
void _showTimePickerSheet() async {        // Hi·ªÉn th·ªã sheet ch·ªçn th·ªùi gian
  final result = await showModalBottomSheet<Map<String, dynamic>>(
    context: context,                      // Context c·ªßa widget
    isScrollControlled: true,              // C√≥ th·ªÉ scroll
    useSafeArea: true,                     // S·ª≠ d·ª•ng safe area
    constraints: BoxConstraints(            // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc
      maxHeight: MediaQuery.of(context).size.height * 0.9,
    ),
    backgroundColor: isDarkMode ? Colors.grey[900] : Colors.white, // M√†u n·ªÅn
    shape: RoundedRectangleBorder(         // Bo g√≥c
      borderRadius: BorderRadius.vertical(top: Radius.circular(16))
    ),
    builder: (context) {                   // Builder function
      return SafeArea(
        child: Padding(
          padding: EdgeInsets.only(
            top: 8,
            bottom: MediaQuery.of(context).viewInsets.bottom, // Padding bottom
          ),
          child: HotelSearchBarForBooking(  // Widget ch·ªçn th·ªùi gian
            initialDate: selectedDate,
            initialTime: selectedTime,
            initialHour: selectedHour,
          ),
        ),
      );
    },
  );
  
  if (result != null) {                    // N·∫øu c√≥ k·∫øt qu·∫£
    setState(() {                          // C·∫≠p nh·∫≠t state
      if (result['range'] != null) {       // N·∫øu ch·ªçn kho·∫£ng th·ªùi gian
        selectedRange = result['range'];
        selectedDate = null;               // Reset c√°c gi√° tr·ªã kh√°c
        selectedTime = null;
        selectedHour = null;
      } else {                             // N·∫øu ch·ªçn th·ªùi gian c·ª• th·ªÉ
        selectedDate = result['date'];
        selectedTime = result['time'];
        selectedHour = result['hour'];
        selectedRange = null;
      }
    });
  }
}
```

‚ù§Ô∏è CH·ª®C NƒÇNG Y√äU TH√çCH:
```dart
Future<void> _toggleFavorite() async {     // Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i y√™u th√≠ch
  if (currentUserId == null) {             // Ki·ªÉm tra ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m y√™u th√≠ch")),
    );
    return;
  }

  try {
    if (isFavorite) {                      // N·∫øu ƒë√£ y√™u th√≠ch
      await DBHelper.removeFromFavorites(currentUserId!, widget.hotel['id']);
      setState(() {
        isFavorite = false;                // C·∫≠p nh·∫≠t tr·∫°ng th√°i
      });
      // Hi·ªÉn th·ªã th√¥ng b√°o
    } else {                               // N·∫øu ch∆∞a y√™u th√≠ch
      await DBHelper.addToFavorites(currentUserId!, widget.hotel['id']);
      setState(() {
        isFavorite = true;                 // C·∫≠p nh·∫≠t tr·∫°ng th√°i
      });
      // Hi·ªÉn th·ªã th√¥ng b√°o
    }
  } catch (e) {                            // X·ª≠ l√Ω l·ªói
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('C√≥ l·ªói x·∫£y ra: $e')),
    );
  }
}
```

üó∫Ô∏è CH·ª®C NƒÇNG B·∫¢N ƒê·ªí:
```dart
void _openMapScreen(BuildContext context, String address, String? hotelName) async {
  // Ki·ªÉm tra xem kh√°ch s·∫°n c√≥ t·ªça ƒë·ªô kh√¥ng
  if (widget.hotel['lat'] != null && widget.hotel['lng'] != null) {
    // S·ª≠ d·ª•ng t·ªça ƒë·ªô t·ª´ database
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => MapScreen(
          lat: widget.hotel['lat'].toDouble(),      // Vƒ© ƒë·ªô
          lng: widget.hotel['lng'].toDouble(),     // Kinh ƒë·ªô
          hotelName: hotelName,                    // T√™n kh√°ch s·∫°n
          userLat: userLat,                        // Vƒ© ƒë·ªô ng∆∞·ªùi d√πng
          userLng: userLng,                        // Kinh ƒë·ªô ng∆∞·ªùi d√πng
        ),
      ),
    );
  } else {
    // Fallback: d√πng geocoding n·∫øu kh√¥ng c√≥ t·ªça ƒë·ªô
    try {
      List<Location> locations = await locationFromAddress(address);
      if (locations.isNotEmpty) {
        final loc = locations.first;
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (_) => MapScreen(
              lat: loc.latitude, 
              lng: loc.longitude, 
              hotelName: hotelName,
              userLat: userLat,
              userLng: userLng,
            ),
          ),
        );
      }
    } catch (e) {
      // X·ª≠ l√Ω l·ªói geocoding
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Kh√¥ng t√¨m th·∫•y v·ªã tr√≠"))
      );
    }
  }
}
```

===========================================
2. ROOM_LIST_SCREEN.DART - TRANG DANH S√ÅCH PH√íNG
===========================================

üìã HI·ªÇN TH·ªä TH√îNG TIN TH·ªúI GIAN:
```dart
String infoText;
if (selectedRange != null) {               // N·∫øu ch·ªçn kho·∫£ng th·ªùi gian
  int days = selectedRange!.end.difference(selectedRange!.start).inDays + 1;
  String start = DateFormat('dd/MM/yyyy').format(selectedRange!.start);
  String end = DateFormat('dd/MM/yyyy').format(selectedRange!.end);
  infoText = '$days ng√†y | $start - $end';
} else {                                   // N·∫øu ch·ªçn th·ªùi gian c·ª• th·ªÉ
  String hourText = selectedHour != null ? '${selectedHour.toString().padLeft(2, '0')} gi·ªù' : '02 gi·ªù';
  String timeText = (selectedTime != null && selectedDate != null)
      ? '${selectedTime!.format(context)}, ${DateFormat('dd/MM/yyyy').format(selectedDate!)}'
      : 'Ch·ªçn gi·ªù nh·∫≠n ph√≤ng';
  infoText = '$hourText | $timeText';
}
```

üè® KI·ªÇM TRA T√çNH KH·∫¢ D·ª§NG PH√íNG:
```dart
FutureBuilder<bool>(
  future: (checkin != null && checkout != null)
    ? DBHelper.isRoomAvailable(room['id'], checkin!, checkout!)  // Ki·ªÉm tra ph√≤ng c√≥ s·∫µn
    : Future.value(true),                                       // M·∫∑c ƒë·ªãnh c√≥ s·∫µn
  builder: (context, snap) {
    final available = snap.data ?? true;                        // L·∫•y k·∫øt qu·∫£
    return Card(
      // ... UI c·ªßa ph√≤ng
      ElevatedButton(
        onPressed: available ? () {                             // Ch·ªâ cho ph√©p n·∫øu c√≥ s·∫µn
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (_) => ConfirmBookingScreen(
                hotel: hotel,
                room: room,
                selectedDate: selectedDate,
                selectedTime: selectedTime,
                selectedHour: selectedHour,
                selectedRange: selectedRange,
              ),
            ),
          );
        } : null,                                               // Disable n·∫øu kh√¥ng c√≥ s·∫µn
        child: Text(available ? 'ƒê·∫∑t ph√≤ng' : 'H·∫øt ph√≤ng'),
      ),
    );
  },
)
```

üí∞ T√çNH GI√Å PH√íNG:
```dart
int _previewPrice(BuildContext context, Map<String, dynamic> hotel, Map<String, dynamic> room) {
  return PricingService.calculateTotalPrice(    // S·ª≠ d·ª•ng service t√≠nh gi√°
    hotel: hotel,
    room: room,
    selectedDate: selectedDate,
    selectedTime: selectedTime,
    selectedHour: selectedHour,
    selectedRange: selectedRange,
  );
}
```

===========================================
3. CONFIRM_BOOKING_SCREEN.DART - TRANG X√ÅC NH·∫¨N
===========================================

üí≥ X·ª¨ L√ù THANH TO√ÅN:
```dart
Future<void> _processBooking(BuildContext context) async {
  try {
    final prefs = await SharedPreferences.getInstance();
    final currentUserId = prefs.getInt('current_user_id');
    
    DateTime? checkin;
    DateTime? checkout;
    
    if (widget.selectedRange != null) {     // N·∫øu ch·ªçn kho·∫£ng th·ªùi gian
      checkin = widget.selectedRange!.start;
      checkout = widget.selectedRange!.end.add(const Duration(days: 1));
    } else if (widget.selectedDate != null && widget.selectedHour != null && widget.selectedTime != null) {
      // N·∫øu ch·ªçn th·ªùi gian c·ª• th·ªÉ
      checkin = DateTime(
        widget.selectedDate!.year, 
        widget.selectedDate!.month, 
        widget.selectedDate!.day, 
        widget.selectedTime!.hour, 
        widget.selectedTime!.minute
      );
      checkout = checkin.add(Duration(hours: widget.selectedHour!));
    }
    
    if (checkin != null && checkout != null) {
      // L∆∞u ƒë·∫∑t ph√≤ng v√†o database
      await DBHelper.insertBooking({
        'room_id': widget.room['id'],
        'user_id': currentUserId ?? 1,
        'checkin': checkin.toIso8601String(),    // Chuy·ªÉn ƒë·ªïi sang string
        'checkout': checkout.toIso8601String(),
        'status': 'booked',
      });
      
      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("ƒê·∫∑t ph√≤ng th√†nh c√¥ng")),
      );
      
      // Chuy·ªÉn ƒë·∫øn tab ph√≤ng ƒë√£ ƒë·∫∑t
      Navigator.pushNamedAndRemoveUntil(
        context,
        '/home',
        (route) => false,                     // X√≥a t·∫•t c·∫£ routes
        arguments: {'tab': 1},                // Tab index 1 = "Ph√≤ng ƒë√£ ƒë·∫∑t"
      );
    }
  } catch (e) {
    // X·ª≠ l√Ω l·ªói
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('L·ªói: $e')),
    );
  }
}
```

üéÅ H·ªòP THO·∫†I ∆ØU ƒê√ÉI:
```dart
void _showPromotionsDialog(BuildContext context) {
  final isDarkMode = Theme.of(context).brightness == Brightness.dark;
  showModalBottomSheet(
    context: context,
    isScrollControlled: true,                // C√≥ th·ªÉ scroll
    backgroundColor: isDarkMode ? Colors.grey[900] : Colors.white,
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.vertical(top: Radius.circular(16))
    ),
    builder: (context) => PromotionDialog(
      selectedPromotion: selectedPromotion,  // ∆Øu ƒë√£i ƒë√£ ch·ªçn
      isDarkMode: isDarkMode,                // Ch·∫ø ƒë·ªô t·ªëi
      onPromotionSelected: (promo) {         // Callback khi ch·ªçn ∆∞u ƒë√£i
        setState(() {
          selectedPromotion = promo;
        });
      },
    ),
  );
}
```

üí≥ H·ªòP THO·∫†I PH∆Ø∆†NG TH·ª®C THANH TO√ÅN:
```dart
void _showPaymentMethodDialog(BuildContext context) {
  final isDarkMode = Theme.of(context).brightness == Brightness.dark;
  showModalBottomSheet(
    context: context,
    isScrollControlled: true,
    backgroundColor: isDarkMode ? Colors.grey[900] : Colors.white,
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.vertical(top: Radius.circular(16))
    ),
    builder: (context) => PaymentMethodDialog(
      selectedPaymentMethod: selectedPaymentMethod,  // Ph∆∞∆°ng th·ª©c ƒë√£ ch·ªçn
      isDarkMode: isDarkMode,
      onPaymentMethodSelected: (method) {            // Callback khi ch·ªçn
        setState(() {
          selectedPaymentMethod = method;
        });
      },
    ),
  );
}
```

===========================================
4. BOOKING_LIST_SCREEN.DART - TRANG DANH S√ÅCH ƒê·∫∂T PH√íNG
===========================================

üìä LOAD D·ªÆ LI·ªÜU ƒê·∫∂T PH√íNG:
```dart
Future<void> _loadBookings() async {
  try {
    final prefs = await SharedPreferences.getInstance();
    final userId = prefs.getInt('current_user_id');
    
    if (userId != null) {
      _currentUserId = userId;
      final bookings = await DBHelper.getUserBookings(userId);  // L·∫•y ƒë·∫∑t ph√≤ng t·ª´ DB
      setState(() {
        _bookings = bookings;
        _isLoading = false;
      });
    } else {
      setState(() {
        _isLoading = false;
      });
    }
  } catch (e) {
    setState(() {
      _isLoading = false;
    });
  }
}
```

üé® GIAO DI·ªÜN THEME:
```dart
@override
Widget build(BuildContext context) {
  final themeProvider = Provider.of<ThemeProvider>(context);
  final isDarkMode = !themeProvider.isLightMode;    // L·∫•y tr·∫°ng th√°i theme
  
  return SafeArea(
    child: Column(
      children: [
        // Custom AppBar v·ªõi theme
        Container(
          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
          color: isDarkMode ? Colors.grey[900] : Colors.white,  // M√†u n·ªÅn theo theme
          child: Row(
            children: [
              Text(
                "Ph√≤ng ƒë√£ ƒë·∫∑t",                    // Ti√™u ƒë·ªÅ
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                  color: isDarkMode ? Colors.white : Colors.black,  // M√†u ch·ªØ theo theme
                ),
              ),
            ],
          ),
        ),
        // N·ªôi dung
        Expanded(
          child: _isLoading
              ? Center(child: CircularProgressIndicator())  // Loading
              : _currentUserId == null
                  ? _buildLoginPrompt()                     // Y√™u c·∫ßu ƒëƒÉng nh·∫≠p
                  : _bookings.isEmpty
                      ? _buildEmptyState()                  // Tr·∫°ng th√°i tr·ªëng
                      : _buildBookingsList(),               // Danh s√°ch ƒë·∫∑t ph√≤ng
        ),
      ],
    ),
  );
}
```

===========================================
5. C√ÅC D·ªäCH V·ª§ H·ªñ TR·ª¢ (SERVICES)
===========================================

üí∞ PRICING_SERVICE.DART - T√çNH GI√Å:
```dart
class PricingService {
  static int calculateTotalPrice({
    required Map<String, dynamic> hotel,
    required Map<String, dynamic> room,
    DateTime? selectedDate,
    TimeOfDay? selectedTime,
    int? selectedHour,
    DateTimeRange? selectedRange,
  }) {
    int basePrice = room['price'] ?? 0;    // Gi√° c∆° b·∫£n c·ªßa ph√≤ng
    
    if (selectedRange != null) {
      // T√≠nh theo ng√†y
      int days = selectedRange.end.difference(selectedRange.start).inDays + 1;
      return basePrice * days;
    } else if (selectedHour != null) {
      // T√≠nh theo gi·ªù
      return (basePrice / 24 * selectedHour).round();
    }
    
    return basePrice;
  }
}
```

üóÑÔ∏è DB_HELPER.DART - QU·∫¢N L√ù C∆† S·ªû D·ªÆ LI·ªÜU:
```dart
class DBHelper {
  // Ki·ªÉm tra ph√≤ng c√≥ s·∫µn
  static Future<bool> isRoomAvailable(int roomId, DateTime checkin, DateTime checkout) async {
    // Logic ki·ªÉm tra ph√≤ng c√≥ s·∫µn trong kho·∫£ng th·ªùi gian
  }
  
  // L·∫•y danh s√°ch ph√≤ng theo kh√°ch s·∫°n
  static Future<List<Map<String, dynamic>>> getRoomsByHotel(int hotelId) async {
    // Logic l·∫•y ph√≤ng t·ª´ database
  }
  
  // L·∫•y ƒë·∫∑t ph√≤ng c·ªßa ng∆∞·ªùi d√πng
  static Future<List<Map<String, dynamic>>> getUserBookings(int userId) async {
    // Logic l·∫•y l·ªãch s·ª≠ ƒë·∫∑t ph√≤ng
  }
  
  // Th√™m ƒë·∫∑t ph√≤ng m·ªõi
  static Future<void> insertBooking(Map<String, dynamic> booking) async {
    // Logic l∆∞u ƒë·∫∑t ph√≤ng v√†o database
  }
}
```

===========================================
6. C√ÅC WIDGET V√Ä COMPONENTS
===========================================

üîç HOTEL_SEARCH_BAR_FOR_BOOKING.DART:
```dart
class HotelSearchBarForBooking extends StatefulWidget {
  final DateTime? initialDate;
  final TimeOfDay? initialTime;
  final int? initialHour;
  
  // Widget t√πy ch·ªânh ƒë·ªÉ ch·ªçn th·ªùi gian ƒë·∫∑t ph√≤ng
  // Bao g·ªìm:
  // - Date picker
  // - Time picker  
  // - Hour selector
  // - Range picker
}
```

üéÅ PROMOTION_DIALOG.DART:
```dart
class PromotionDialog extends StatelessWidget {
  final Map<String, dynamic>? selectedPromotion;
  final bool isDarkMode;
  final Function(Map<String, dynamic>) onPromotionSelected;
  
  // Hi·ªÉn th·ªã danh s√°ch ∆∞u ƒë√£i c√≥ s·∫µn
  // Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn
  // G·ªçi callback khi ch·ªçn
}
```

üí≥ PAYMENT_METHOD_DIALOG.DART:
```dart
class PaymentMethodDialog extends StatelessWidget {
  final String selectedPaymentMethod;
  final bool isDarkMode;
  final Function(String) onPaymentMethodSelected;
  
  // Hi·ªÉn th·ªã c√°c ph∆∞∆°ng th·ª©c thanh to√°n
  // - Chuy·ªÉn kho·∫£n ng√¢n h√†ng
  // - Ti·ªÅn m·∫∑t
  // G·ªçi callback khi ch·ªçn
}
```

===========================================
7. QU·∫¢N L√ù TR·∫†NG TH√ÅI V√Ä THEME
===========================================

üåì THEME_PROVIDER.DART:
```dart
class ThemeProvider with ChangeNotifier {
  bool _isLightMode = true;
  
  bool get isLightMode => _isLightMode;
  
  void toggleTheme() {
    _isLightMode = !_isLightMode;
    notifyListeners();                      // Th√¥ng b√°o thay ƒë·ªïi
  }
  
  ThemeData get themeData {
    return _isLightMode ? lightTheme : darkTheme;  // Tr·∫£ v·ªÅ theme t∆∞∆°ng ·ª©ng
  }
}
```

üåç APP_LOCALIZATIONS.DART:
```dart
class AppLocalizations {
  final BuildContext context;
  
  AppLocalizations(this.context);
  
  String of(String key, {bool listen = true}) {
    // L·∫•y text theo ng√¥n ng·ªØ hi·ªán t·∫°i
    // H·ªó tr·ª£ ti·∫øng Vi·ªát v√† ti·∫øng Anh
    // S·ª≠ d·ª•ng language_text.json
  }
}
```

===========================================
8. C√ÅC THU·∫¨T TO√ÅN V√Ä LOGIC QUAN TR·ªåNG
===========================================

üìè T√çNH KHO·∫¢NG C√ÅCH HAVERSINE:
```dart
// C√¥ng th·ª©c t√≠nh kho·∫£ng c√°ch gi·ªØa 2 ƒëi·ªÉm tr√™n Tr√°i ƒê·∫•t
// S·ª≠ d·ª•ng t·ªça ƒë·ªô vƒ© ƒë·ªô v√† kinh ƒë·ªô
// K·∫øt qu·∫£ tr·∫£ v·ªÅ ƒë∆°n v·ªã m√©t
```

‚è∞ X·ª¨ L√ù TH·ªúI GIAN:
```dart
// Chuy·ªÉn ƒë·ªïi gi·ªØa c√°c ƒë·ªãnh d·∫°ng th·ªùi gian
// - DateTime: Ng√†y gi·ªù ƒë·∫ßy ƒë·ªß
// - TimeOfDay: Ch·ªâ gi·ªù ph√∫t
// - DateTimeRange: Kho·∫£ng th·ªùi gian
// - ISO 8601 string: ƒê·ªãnh d·∫°ng chu·∫©n cho database
```

üíæ QU·∫¢N L√ù STATE:
```dart
// S·ª≠ d·ª•ng setState() ƒë·ªÉ c·∫≠p nh·∫≠t UI
// S·ª≠ d·ª•ng Provider ƒë·ªÉ qu·∫£n l√Ω theme
// S·ª≠ d·ª•ng SharedPreferences ƒë·ªÉ l∆∞u tr·ªØ local
// S·ª≠ d·ª•ng FutureBuilder ƒë·ªÉ x·ª≠ l√Ω async data
```

===========================================
9. C√ÅC PATTERN V√Ä KI·∫æN TR√öC S·ª¨ D·ª§NG
===========================================

üèóÔ∏è ARCHITECTURE PATTERNS:
- **MVC Pattern**: T√°ch bi·ªát Model, View, Controller
- **Provider Pattern**: Qu·∫£n l√Ω state v√† dependency injection
- **Repository Pattern**: T√°ch bi·ªát logic database
- **Service Pattern**: T√°ch bi·ªát business logic

üì± UI PATTERNS:
- **Bottom Sheet**: Hi·ªÉn th·ªã form ch·ªçn th·ªùi gian
- **Modal Dialog**: Hi·ªÉn th·ªã ∆∞u ƒë√£i v√† thanh to√°n
- **Card Layout**: Hi·ªÉn th·ªã th√¥ng tin ph√≤ng v√† kh√°ch s·∫°n
- **List View**: Hi·ªÉn th·ªã danh s√°ch ph√≤ng v√† ƒë·∫∑t ph√≤ng

üîÑ NAVIGATION PATTERNS:
- **Named Routes**: ƒê·ªãnh nghƒ©a routes trong route_names.dart
- **MaterialPageRoute**: Chuy·ªÉn trang v·ªõi animation
- **pushNamedAndRemoveUntil**: X√≥a stack navigation

===========================================
10. X·ª¨ L√ù L·ªñI V√Ä VALIDATION
===========================================

‚ö†Ô∏è ERROR HANDLING:
```dart
try {
  // Th·ª±c hi·ªán operation
} catch (e) {
  // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
  ScaffoldMessenger.of(context).showSnackBar(
    SnackBar(content: Text('L·ªói: $e')),
  );
}
```

‚úÖ VALIDATION:
```dart
// Ki·ªÉm tra ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p
if (currentUserId == null) {
  // Hi·ªÉn th·ªã y√™u c·∫ßu ƒëƒÉng nh·∫≠p
  return;
}

// Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
if (checkin != null && checkout != null) {
  // Ti·∫øp t·ª•c x·ª≠ l√Ω
} else {
  // Hi·ªÉn th·ªã l·ªói
}
```

===========================================
K·∫æT LU·∫¨N
===========================================

H·ªá th·ªëng ƒë·∫∑t ph√≤ng n√†y ƒë∆∞·ª£c x√¢y d·ª±ng v·ªõi:
- ‚úÖ Ki·∫øn tr√∫c r√µ r√†ng, d·ªÖ b·∫£o tr√¨
- ‚úÖ X·ª≠ l√Ω l·ªói to√†n di·ªán
- ‚úÖ UI/UX th√¢n thi·ªán ng∆∞·ªùi d√πng
- ‚úÖ H·ªó tr·ª£ ƒëa ng√¥n ng·ªØ v√† theme
- ‚úÖ T·ªëi ∆∞u hi·ªáu su·∫•t v·ªõi async/await
- ‚úÖ S·ª≠ d·ª•ng c√°c Flutter best practices

Code ƒë∆∞·ª£c vi·∫øt theo chu·∫©n Flutter v·ªõi:
- T√™n bi·∫øn v√† h√†m r√µ r√†ng, d·ªÖ hi·ªÉu
- Comment ƒë·∫ßy ƒë·ªß cho c√°c logic ph·ª©c t·∫°p
- T√°ch bi·ªát r√µ r√†ng gi·ªØa c√°c layer
- S·ª≠ d·ª•ng const constructor khi c√≥ th·ªÉ
- X·ª≠ l√Ω null safety ƒë·∫ßy ƒë·ªß

